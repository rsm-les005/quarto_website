---
title: "Poisson Regression Examples"
author: "Lebin Sun"
date: May 7th, 2025
callout-appearance: minimal # this hides the blue "i" icon on .callout-notes
---


## Blueprinty Case Study

### Introduction

Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty's software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty's software and after using it. Unfortunately, such data is not available. 

However, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm's number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty's software. The marketing team would like to use this data to make the claim that firms using Blueprinty's software are more successful in getting their patent applications approved.


### Data

Now, let's first read in the Blueprinty data.
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the data
blueprinty = pd.read_csv("blueprinty.csv")

# Quick look at the data
desc = blueprinty.describe()
desc_rounded = desc.copy()
desc_rounded.loc["mean"] = desc_rounded.loc["mean"].round(2)
desc_rounded.loc["std"] = desc_rounded.loc["std"].round(2)
desc_rounded.loc[~desc_rounded.index.isin(["mean", "std"])] = desc_rounded.loc[~desc_rounded.index.isin(["mean", "std"])].round(0)
desc_rounded.style\
    .format("{:.2f}", subset=pd.IndexSlice["mean", :])\
    .format("{:.2f}", subset=pd.IndexSlice["std", :])\
    .format("{:.0f}", subset=pd.IndexSlice[["count", "min", "25%", "50%", "75%", "max"], :])
```

Next, a histogram of number of patens distribution by customer status bellow compares differences between customer groups. 
```{python}
# Set up the plot style
sns.set(style="whitegrid")
means = blueprinty.groupby("iscustomer")["patents"].mean()
# Histogram of number of patents by customer status
plt.figure(figsize=(8, 5))
sns.histplot(data=blueprinty, x="patents", hue="iscustomer", multiple="dodge", binwidth=1)

plt.axvline(means[0], color="orange", linestyle="--", linewidth=2, label="Mean (Non-customer)")
plt.axvline(means[1], color="blue", linestyle="--", linewidth=2, label="Mean (Customer)")

plt.title("Distribution of Patents by Customer Status")
plt.xlabel("Number of Patents")
plt.ylabel("Count")
plt.legend(title="Customer Status", labels=["Non-customer", "Customer"])
plt.tight_layout()
plt.show()
```
From the histogram and mean values, it appears that customers of Blueprinty's software tend to have more patents on average than non-customers. This may suggest that the software is associated with greater patenting success, but further modeling is necessary to control for confounding variables.

Blueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.

After observing that Blueprinty customers might not be randomly selected, we explore whether there are systematic differences in region and firm age between customers and non-customers.

```{python}
# Bar plot of region distribution by customer status
plt.figure(figsize=(8, 4))
sns.countplot(data=blueprinty, x="region", hue="iscustomer")
plt.title("Region Distribution by Customer Status")
plt.xlabel("Region")
plt.ylabel("Count")
plt.legend(title="Customer", labels=["Non-customer", "Customer"])
plt.tight_layout()
plt.show()
```

The plot shows that customer adoption varies by region. For instance, the Northeast has a disproportionately high number of customers, while the Southwest and Northwest are dominated by non-customers. This implies that regional variation could confound any relationship between software usage and patenting success, so it should be accounted for in modeling.

```{python}
# Boxplot of age by customer status
plt.figure(figsize=(8, 4))
sns.boxplot(data=blueprinty, x="iscustomer", y="age")
plt.title("Age Distribution by Customer Status")
plt.xlabel("Customer Status (0 = Non-customer, 1 = Customer)")
plt.ylabel("Age")
plt.tight_layout()
plt.show()
```

Customers appear to be slightly older than non-customers, with a higher median and a broader age distribution. While the difference is modest, it still points to the possibility that more mature firms are more likely to adopt Blueprinty's tools. Again, this reinforces the need to adjust for age when estimating treatment effects.

### Estimation of Simple Poisson Model

Since our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.

The probability mass function of a Poisson distribution is:

$$
P(Y_i \mid \lambda) = \frac{e^{-\lambda} \lambda^{Y_i}}{Y_i!}
$$

Assuming independence across observations, the likelihood for a sample of \( n \) observations is:

$$
L(\lambda \mid Y_1, \dots, Y_n) = \prod_{i=1}^{n} \frac{e^{-\lambda} \lambda^{Y_i}}{Y_i!}
$$

And the log-likelihood function is:

$$
\log L(\lambda) = \sum_{i=1}^{n} \left[ -\lambda + Y_i \log(\lambda) - \log(Y_i!) \right]
$$

Now translate the log-likelihood expression into Python code. The function below takes a proposed value of 
λ and a vector of observed patent counts Y, and returns the total log-likelihood. We use gammaln(Y + 1) instead of log(Y!) to ensure numerical stability and avoid issues with large factorials.

```{python}
import numpy as np
from scipy.special import gammaln

def poisson_loglikelihood(lambda_, Y):
    """Compute the Poisson log-likelihood for a given lambda and data Y"""
    if lambda_ <= 0:
        return -np.inf
    loglik = np.sum(-lambda_ + Y * np.log(lambda_) - gammaln(Y + 1))
    return loglik
```

This function will allow us to evaluate the fit of any given λ to the data. In the next step, we’ll search for the value of λ that maximizes this log-likelihood — our Maximum Likelihood Estimate (MLE).

_todo: Use your function to plot lambda on the horizontal axis and the likelihood (or log-likelihood) on the vertical axis for a range of lambdas (use the observed number of patents as the input for Y)._
```{python}
# Define a range of lambda values to evaluate
lambda_vals = np.linspace(0.1, 10, 200)

# Compute log-likelihood for each lambda value
loglik_vals = [poisson_loglikelihood(l, blueprinty["patents"]) for l in lambda_vals]

# Plot the log-likelihood curve
plt.figure(figsize=(8, 5))
plt.plot(lambda_vals, loglik_vals, color="purple")
plt.xlabel("Lambda (λ)")
plt.ylabel("Log-Likelihood")
plt.title("Poisson Log-Likelihood over a Range of λ")
plt.grid(True)
plt.tight_layout()
plt.show()
```


_todo: If you're feeling mathematical, take the first derivative of your likelihood or log-likelihood, set it equal to zero and solve for lambda. You will find lambda_mle is Ybar, which "feels right" because the mean of a Poisson distribution is lambda._

Let’s now find the Maximum Likelihood Estimate (MLE) for **lambda** by taking the derivative of the log-likelihood and setting it equal to zero:

\[
\frac{d}{d\lambda} \log L(\lambda) = \sum_{i=1}^{n} \left( -1 + \frac{Y_i}{\lambda} \right)
= -n + \frac{1}{\lambda} \sum_{i=1}^{n} Y_i
\]

Setting this equal to zero:

\[
-n + \frac{1}{\lambda} \sum Y_i = 0 \quad \Rightarrow \quad \lambda = \frac{1}{n} \sum Y_i = \bar{Y}
\]

So the MLE for **lambda** is simply the sample mean of the observed counts.


And here’s a small Python code block to verify this numerically:

```{python}
lambda_mle = blueprinty["patents"].mean()
lambda_mle.round(3)
```


_todo: Find the MLE by optimizing your likelihood function with optim() in R or sp.optimize() in Python._

We can now find the Maximum Likelihood Estimate (MLE) for **lambda** numerically by maximizing the log-likelihood function. Since `scipy.optimize` performs minimization, we minimize the *negative* log-likelihood over a reasonable range of values for **lambda**.

```{python}
from scipy.optimize import minimize_scalar

result = minimize_scalar(
    lambda l: -poisson_loglikelihood(l, blueprinty["patents"]),
    bounds=(0.1, 10),
    method="bounded"
)

lambda_mle_opt = result.x
lambda_mle_opt.round(3)
```

The numerical estimate of lambda (MLE) is **3.685**, which matches the sample mean of the observed patent counts.

### Estimation of Poisson Regression Model

Next, we extend our simple Poisson model to a Poisson Regression Model such that $Y_i = \text{Poisson}(\lambda_i)$ where $\lambda_i = \exp(X_i'\beta)$. The interpretation is that the success rate of patent awards is not constant across all firms ($\lambda$) but rather is a function of firm characteristics $X_i$. Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.

_todo: Update your likelihood or log-likelihood function with an additional argument to take in a covariate matrix X. Also change the parameter of the model from lambda to the beta vector. In this model, lambda must be a positive number, so we choose the inverse link function g_inv() to be exp() so that_ $\lambda_i = e^{X_i'\beta}$. _For example:_

```{python}
import numpy as np
from scipy.special import gammaln

def poisson_regression_loglikelihood(beta, Y, X):
    beta = np.asarray(beta, dtype=float)
    eta = X @ beta
    lambda_ = np.exp(eta)
    loglik = np.sum(-lambda_ + Y * np.log(lambda_ + 1e-10) - gammaln(Y + 1))
    return loglik
```

_todo: Use your function along with R's optim() or Python's sp.optimize() to find the MLE vector and the Hessian of the Poisson model with covariates. Specifically, the first column of X should be all 1's to enable a constant term in the model, and the subsequent columns should be age, age squared, binary variables for all but one of the regions, and the binary customer variable. Use the Hessian to find standard errors of the beta parameter estimates and present a table of coefficients and standard errors._

We prepare the covariate matrix X so that it has the structure needed for Poisson regression: a constant column, numeric variables, and encoded categorical variables.

```{python}
import pandas as pd
import numpy as np

# Create dummy variables for region (drop one to avoid multicollinearity)
blueprinty_dummies = pd.get_dummies(blueprinty["region"], drop_first=True)

# Add age, age^2, customer, and intercept
blueprinty["age2"] = blueprinty["age"] ** 2
X = pd.concat([
    pd.Series(1, index=blueprinty.index, name="intercept"),
    blueprinty[["age", "age2", "iscustomer"]],
    blueprinty_dummies
], axis=1)

# Convert to numpy array
X_mat = X.values.astype(float)
Y = blueprinty["patents"].values.astype(float)
```

We use scipy.optimize.minimize with the BFGS method to find the MLEs of our regression coefficients.

```{python}
#| echo: true
#| warning: false
#| message: false

from scipy.optimize import minimize

# Define negative log-likelihood function
neg_loglik = lambda beta: -poisson_regression_loglikelihood(beta, Y, X_mat)

beta_init = np.full(X_mat.shape[1], -0.1)

# Minimize it
result = minimize(neg_loglik, beta_init, method="BFGS")
beta_hat = result.x
hessian_inv = result.hess_inv
```

The table below reports the estimated effect of each variable on the number of patents a firm receives, along with the standard error of each estimate.
```{python}
# Standard errors from the inverse Hessian
se = np.sqrt(np.diag(hessian_inv))
# Combine into a tidy table
coef_table = pd.DataFrame({
    "Variable": X.columns,
    "Estimate": beta_hat,
    "Std. Error": se
})
coef_table
```


_todo: Check your results using R's glm() function or Python sm.GLM() function._

_todo: Interpret the results._ 

_todo: What do you conclude about the effect of Blueprinty's software on patent success? Because the beta coefficients are not directly interpretable, it may help to create two fake datasets: X_0 and X_1 where X_0 is the X data but with iscustomer=0 for every observation and X_1 is the X data but with iscustomer=1 for every observation. Then, use X_0 and your fitted model to get the vector of predicted number of patents (y_pred_0) for every firm in the dataset, and use X_1 to get Y_pred_1 for every firm. Then subtract y_pred_1 minus y_pred_0 and take the average of that vector of differences._




## AirBnB Case Study

### Introduction

AirBnB is a popular platform for booking short-term rentals. In March 2017, students Annika Awad, Evan Lebo, and Anna Linden scraped of 40,000 Airbnb listings from New York City.  The data include the following variables:

:::: {.callout-note collapse="true"}
### Variable Definitions

    - `id` = unique ID number for each unit
    - `last_scraped` = date when information scraped
    - `host_since` = date when host first listed the unit on Airbnb
    - `days` = `last_scraped` - `host_since` = number of days the unit has been listed
    - `room_type` = Entire home/apt., Private room, or Shared room
    - `bathrooms` = number of bathrooms
    - `bedrooms` = number of bedrooms
    - `price` = price per night (dollars)
    - `number_of_reviews` = number of reviews for the unit on Airbnb
    - `review_scores_cleanliness` = a cleanliness score from reviews (1-10)
    - `review_scores_location` = a "quality of location" score from reviews (1-10)
    - `review_scores_value` = a "quality of value" score from reviews (1-10)
    - `instant_bookable` = "t" if instantly bookable, "f" if not

::::


_todo: Assume the number of reviews is a good proxy for the number of bookings. Perform some exploratory data analysis to get a feel for the data, handle or drop observations with missing values on relevant variables, build one or more models (e.g., a poisson regression model for the number of bookings as proxied by the number of reviews), and interpret model coefficients to describe variation in the number of reviews as a function of the variables provided._





